// Copyright (c) 2020, DCSO GmbH

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: task/query.proto

package task

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// QueryType specifies the kind of query in a Query message.
type QueryType int32

const (
	QueryType_UNKNOWN_QUERY_TYPE QueryType = 0
	QueryType_FLOW_PARAM         QueryType = 1
	QueryType_FLOW_ID            QueryType = 2
	QueryType_COMMUNITY_ID       QueryType = 3
	QueryType_MOCK_QUERY         QueryType = 254
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0:   "UNKNOWN_QUERY_TYPE",
		1:   "FLOW_PARAM",
		2:   "FLOW_ID",
		3:   "COMMUNITY_ID",
		254: "MOCK_QUERY",
	}
	QueryType_value = map[string]int32{
		"UNKNOWN_QUERY_TYPE": 0,
		"FLOW_PARAM":         1,
		"FLOW_ID":            2,
		"COMMUNITY_ID":       3,
		"MOCK_QUERY":         254,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_query_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_task_query_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_task_query_proto_rawDescGZIP(), []int{0}
}

// FlowParam contains parameters for flow queries.
type FlowParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network contains a network protocol identifier and is expected to contain
	// the same values as are commonly used in go's net package. Currently only
	// "tcp" and "udp" are supported.
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// SrcHostPort contains a "host and port string" for the source endpoint.
	// Values are expected to adhere to the output of go's net.JoinHostPort
	// function, i.e., "host:port", or, "[host]:port".
	SrcHostPort string `protobuf:"bytes,2,opt,name=src_host_port,json=srcHostPort,proto3" json:"src_host_port,omitempty"`
	// DstHostPort contains a "host and port string" for the destination
	// endpoint. Values are expected to adhere to the output of go's
	// net.JoinHostPort function, i.e., "host:port", or, "[host]:port".
	DstHostPort string `protobuf:"bytes,3,opt,name=dst_host_port,json=dstHostPort,proto3" json:"dst_host_port,omitempty"`
}

func (x *FlowParam) Reset() {
	*x = FlowParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowParam) ProtoMessage() {}

func (x *FlowParam) ProtoReflect() protoreflect.Message {
	mi := &file_task_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowParam.ProtoReflect.Descriptor instead.
func (*FlowParam) Descriptor() ([]byte, []int) {
	return file_task_query_proto_rawDescGZIP(), []int{0}
}

func (x *FlowParam) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *FlowParam) GetSrcHostPort() string {
	if x != nil {
		return x.SrcHostPort
	}
	return ""
}

func (x *FlowParam) GetDstHostPort() string {
	if x != nil {
		return x.DstHostPort
	}
	return ""
}

// MockQuery is fore testing purposes only.
type MockQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mock string `protobuf:"bytes,1,opt,name=mock,proto3" json:"mock,omitempty"`
}

func (x *MockQuery) Reset() {
	*x = MockQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockQuery) ProtoMessage() {}

func (x *MockQuery) ProtoReflect() protoreflect.Message {
	mi := &file_task_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockQuery.ProtoReflect.Descriptor instead.
func (*MockQuery) Descriptor() ([]byte, []int) {
	return file_task_query_proto_rawDescGZIP(), []int{1}
}

func (x *MockQuery) GetMock() string {
	if x != nil {
		return x.Mock
	}
	return ""
}

// Query encapsulates various query types to be processed by stenosis. Query
// messages are expected to be forwarded as JSON-marshaled data via stenosis
// REST API endpoint (typically as ad-hoc queries) or as gRPC messages
// (typically by FEVER).
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type specifies the query type.
	Type QueryType `protobuf:"varint,1,opt,name=type,proto3,enum=task.QueryType" json:"type,omitempty"`
	// BeforeTime is the point in time before which packets are queried for.
	BeforeTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=before_time,json=beforeTime,proto3" json:"before_time,omitempty"`
	// AfterTime is the point in time after which packets are queried for.
	AfterTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=after_time,json=afterTime,proto3" json:"after_time,omitempty"`
	// Content contains the Query type-specific parameters.
	//
	// Types that are assignable to Content:
	//	*Query_FlowParam
	//	*Query_MockQuery
	Content isQuery_Content `protobuf_oneof:"content"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_task_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_task_query_proto_rawDescGZIP(), []int{2}
}

func (x *Query) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_UNKNOWN_QUERY_TYPE
}

func (x *Query) GetBeforeTime() *timestamp.Timestamp {
	if x != nil {
		return x.BeforeTime
	}
	return nil
}

func (x *Query) GetAfterTime() *timestamp.Timestamp {
	if x != nil {
		return x.AfterTime
	}
	return nil
}

func (m *Query) GetContent() isQuery_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Query) GetFlowParam() *FlowParam {
	if x, ok := x.GetContent().(*Query_FlowParam); ok {
		return x.FlowParam
	}
	return nil
}

func (x *Query) GetMockQuery() *MockQuery {
	if x, ok := x.GetContent().(*Query_MockQuery); ok {
		return x.MockQuery
	}
	return nil
}

type isQuery_Content interface {
	isQuery_Content()
}

type Query_FlowParam struct {
	// FlowParam contains parameters for flow-based queries.
	FlowParam *FlowParam `protobuf:"bytes,4,opt,name=flow_param,json=flowParam,proto3,oneof"`
}

type Query_MockQuery struct {
	// MockQuery is for testing purposes only.
	MockQuery *MockQuery `protobuf:"bytes,14,opt,name=mock_query,json=mockQuery,proto3,oneof"`
}

func (*Query_FlowParam) isQuery_Content() {}

func (*Query_MockQuery) isQuery_Content() {}

var File_task_query_proto protoreflect.FileDescriptor

var file_task_query_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x09, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x1f, 0x0a, 0x09, 0x4d, 0x6f, 0x63, 0x6b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x22, 0x93, 0x02, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x6f,
	0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a,
	0x63, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x4f, 0x43, 0x4b, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0xfe, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x44, 0x43, 0x53, 0x4f, 0x2f, 0x66, 0x65, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x65, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_task_query_proto_rawDescOnce sync.Once
	file_task_query_proto_rawDescData = file_task_query_proto_rawDesc
)

func file_task_query_proto_rawDescGZIP() []byte {
	file_task_query_proto_rawDescOnce.Do(func() {
		file_task_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_query_proto_rawDescData)
	})
	return file_task_query_proto_rawDescData
}

var file_task_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_task_query_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_task_query_proto_goTypes = []interface{}{
	(QueryType)(0),              // 0: task.QueryType
	(*FlowParam)(nil),           // 1: task.FlowParam
	(*MockQuery)(nil),           // 2: task.MockQuery
	(*Query)(nil),               // 3: task.Query
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_task_query_proto_depIdxs = []int32{
	0, // 0: task.Query.type:type_name -> task.QueryType
	4, // 1: task.Query.before_time:type_name -> google.protobuf.Timestamp
	4, // 2: task.Query.after_time:type_name -> google.protobuf.Timestamp
	1, // 3: task.Query.flow_param:type_name -> task.FlowParam
	2, // 4: task.Query.mock_query:type_name -> task.MockQuery
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_task_query_proto_init() }
func file_task_query_proto_init() {
	if File_task_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_task_query_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Query_FlowParam)(nil),
		(*Query_MockQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_task_query_proto_goTypes,
		DependencyIndexes: file_task_query_proto_depIdxs,
		EnumInfos:         file_task_query_proto_enumTypes,
		MessageInfos:      file_task_query_proto_msgTypes,
	}.Build()
	File_task_query_proto = out.File
	file_task_query_proto_rawDesc = nil
	file_task_query_proto_goTypes = nil
	file_task_query_proto_depIdxs = nil
}
