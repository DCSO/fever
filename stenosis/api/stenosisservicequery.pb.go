// Copyright (c) 2020, DCSO GmbH

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: api/stenosisservicequery.proto

package api

import (
	context "context"
	task "github.com/DCSO/fever/stenosis/task"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// AliveRequest contains the id to be echoed by a successful Alive() call.
type AliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the id to be echoed.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AliveRequest) Reset() {
	*x = AliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_stenosisservicequery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliveRequest) ProtoMessage() {}

func (x *AliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stenosisservicequery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliveRequest.ProtoReflect.Descriptor instead.
func (*AliveRequest) Descriptor() ([]byte, []int) {
	return file_api_stenosisservicequery_proto_rawDescGZIP(), []int{0}
}

func (x *AliveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AliveResponse contains the echoed id of a preceeding Alive() request.
type AliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the echoed id of the preceeding request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Ok is the fixed string http.StatusText(http.StatusOK)
	Ok string `protobuf:"bytes,2,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *AliveResponse) Reset() {
	*x = AliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_stenosisservicequery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliveResponse) ProtoMessage() {}

func (x *AliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stenosisservicequery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliveResponse.ProtoReflect.Descriptor instead.
func (*AliveResponse) Descriptor() ([]byte, []int) {
	return file_api_stenosisservicequery_proto_rawDescGZIP(), []int{1}
}

func (x *AliveResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AliveResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

// QueryResponse contains the response to a QueryRequest.
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token is the task identifying token in hex encoding.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Hateoas provides RESTful state optionally fowarded by "gRPC gateway".
	// XLinks to avoid mingling with the automatic name assignment while
	// maintaining REST API stability towards DCSO's portal.
	// This field is subject to the request's omit_additional_data flag.
	XLinks []*HateoasLink `protobuf:"bytes,2,rep,name=_links,json=Links,proto3" json:"_links,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_stenosisservicequery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stenosisservicequery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_api_stenosisservicequery_proto_rawDescGZIP(), []int{2}
}

func (x *QueryResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryResponse) GetXLinks() []*HateoasLink {
	if x != nil {
		return x.XLinks
	}
	return nil
}

var File_api_stenosisservicequery_proto protoreflect.FileDescriptor

var file_api_stenosisservicequery_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x65, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x61, 0x74,
	0x65, 0x6f, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x0c, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x0d, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x4e, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x74, 0x65, 0x6f, 0x61, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x32, 0x70, 0x0a, 0x14, 0x53,
	0x74, 0x65, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x11, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x24, 0x5a,
	0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x43, 0x53, 0x4f,
	0x2f, 0x66, 0x65, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x65, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_stenosisservicequery_proto_rawDescOnce sync.Once
	file_api_stenosisservicequery_proto_rawDescData = file_api_stenosisservicequery_proto_rawDesc
)

func file_api_stenosisservicequery_proto_rawDescGZIP() []byte {
	file_api_stenosisservicequery_proto_rawDescOnce.Do(func() {
		file_api_stenosisservicequery_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_stenosisservicequery_proto_rawDescData)
	})
	return file_api_stenosisservicequery_proto_rawDescData
}

var file_api_stenosisservicequery_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_stenosisservicequery_proto_goTypes = []interface{}{
	(*AliveRequest)(nil),  // 0: api.AliveRequest
	(*AliveResponse)(nil), // 1: api.AliveResponse
	(*QueryResponse)(nil), // 2: api.QueryResponse
	(*HateoasLink)(nil),   // 3: api.HateoasLink
	(*task.Query)(nil),    // 4: task.Query
}
var file_api_stenosisservicequery_proto_depIdxs = []int32{
	3, // 0: api.QueryResponse._links:type_name -> api.HateoasLink
	0, // 1: api.StenosisServiceQuery.Alive:input_type -> api.AliveRequest
	4, // 2: api.StenosisServiceQuery.Query:input_type -> task.Query
	1, // 3: api.StenosisServiceQuery.Alive:output_type -> api.AliveResponse
	2, // 4: api.StenosisServiceQuery.Query:output_type -> api.QueryResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_stenosisservicequery_proto_init() }
func file_api_stenosisservicequery_proto_init() {
	if File_api_stenosisservicequery_proto != nil {
		return
	}
	file_api_hateoas_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_stenosisservicequery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_stenosisservicequery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_stenosisservicequery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_stenosisservicequery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_stenosisservicequery_proto_goTypes,
		DependencyIndexes: file_api_stenosisservicequery_proto_depIdxs,
		MessageInfos:      file_api_stenosisservicequery_proto_msgTypes,
	}.Build()
	File_api_stenosisservicequery_proto = out.File
	file_api_stenosisservicequery_proto_rawDesc = nil
	file_api_stenosisservicequery_proto_goTypes = nil
	file_api_stenosisservicequery_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StenosisServiceQueryClient is the client API for StenosisServiceQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StenosisServiceQueryClient interface {
	// Alive checks whether a gRPC server is actively listening to requests by
	// echoing the request id.
	Alive(ctx context.Context, in *AliveRequest, opts ...grpc.CallOption) (*AliveResponse, error)
	// Query forwards a task.Query and responds with an identifying task.Token in
	// return.
	Query(ctx context.Context, in *task.Query, opts ...grpc.CallOption) (*QueryResponse, error)
}

type stenosisServiceQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewStenosisServiceQueryClient(cc grpc.ClientConnInterface) StenosisServiceQueryClient {
	return &stenosisServiceQueryClient{cc}
}

func (c *stenosisServiceQueryClient) Alive(ctx context.Context, in *AliveRequest, opts ...grpc.CallOption) (*AliveResponse, error) {
	out := new(AliveResponse)
	err := c.cc.Invoke(ctx, "/api.StenosisServiceQuery/Alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stenosisServiceQueryClient) Query(ctx context.Context, in *task.Query, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/api.StenosisServiceQuery/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StenosisServiceQueryServer is the server API for StenosisServiceQuery service.
type StenosisServiceQueryServer interface {
	// Alive checks whether a gRPC server is actively listening to requests by
	// echoing the request id.
	Alive(context.Context, *AliveRequest) (*AliveResponse, error)
	// Query forwards a task.Query and responds with an identifying task.Token in
	// return.
	Query(context.Context, *task.Query) (*QueryResponse, error)
}

// UnimplementedStenosisServiceQueryServer can be embedded to have forward compatible implementations.
type UnimplementedStenosisServiceQueryServer struct {
}

func (*UnimplementedStenosisServiceQueryServer) Alive(context.Context, *AliveRequest) (*AliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (*UnimplementedStenosisServiceQueryServer) Query(context.Context, *task.Query) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterStenosisServiceQueryServer(s *grpc.Server, srv StenosisServiceQueryServer) {
	s.RegisterService(&_StenosisServiceQuery_serviceDesc, srv)
}

func _StenosisServiceQuery_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StenosisServiceQueryServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StenosisServiceQuery/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StenosisServiceQueryServer).Alive(ctx, req.(*AliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StenosisServiceQuery_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StenosisServiceQueryServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StenosisServiceQuery/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StenosisServiceQueryServer).Query(ctx, req.(*task.Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _StenosisServiceQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.StenosisServiceQuery",
	HandlerType: (*StenosisServiceQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alive",
			Handler:    _StenosisServiceQuery_Alive_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _StenosisServiceQuery_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stenosisservicequery.proto",
}
